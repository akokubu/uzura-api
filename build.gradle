buildscript {
    ext {
        springBootVersion = '1.2.1.RELEASE'
        springLoadedVersion = '1.2.1.RELEASE'
        domaVersion = '2.0.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.springframework:springloaded:${springLoadedVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 

jar {
    baseName = 'uzura-api'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

/* DomaのSQLファイルをコンパイルより前に出力先Dirにコピーするための設定 */
processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

dependencies {
    compile("org.springframework.boot:spring-boot-starter-parent")
    compile("org.springframework.boot:spring-boot-starter-web")
    
    /* TODO:本当はprovided相当にすべきだができてない */
    compile("org.projectlombok:lombok:1.14.8")
    
    /* DBアクセス関連 */
    compile("org.springframework:spring-jdbc")
    compile("org.seasar.doma:doma:2.0.1")
    
    /* H2database */
    //compile("com.h2database:h2")
    
    /* MySQL */
    compile("mysql:mysql-connector-java:5.1.34")
    
    /* ログの設定 */
    compile("org.lazyluke:log4jdbc-remix:0.2.7")    
        
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.jayway.restassured:rest-assured:2.3.3")
}

import org.gradle.plugins.ide.eclipse.model.SourceFolder
	
eclipse {
    classpath {
		 file.whenMerged {cp ->
			 cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/java") }*.output = "build/classes/main"
			 cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/resources") }*.output = "build/resources/main"
			 cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/java") }*.output = "build/classes/test"
			 cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/resources") }*.output = "build/resources/test"
		 }
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
         containers "org.springsource.ide.eclipse.gradle.classpathcontainer"
         defaultOutputDir = file('build/classes')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

task stage(dependsOn: ['assemble'])

defaultTasks "clean", "build"
